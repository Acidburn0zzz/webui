pipeline {
  agent none

  environment {
    GH_ORG = 'freenas'
    GH_REPO = 'webui'
  }
  stages {

    stage('Queued') {
      agent {
        label 'JenkinsMaster'
      }
      steps {
        echo "Build queued"
        setBuildStatus("Build queued", "PENDING");
      }
    }

    stage('ixbuild') {
      agent {
        label 'FreeNAS-ISO'
      }
      post {
        success {
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
          junit 'results/**'
	  stash includes: 'artifacts/iso/*.iso', name: 'iso'
	  stash includes: 'artifacts/*-Update/**', name: 'update-files'
        }
        failure {
          echo 'Saving failed artifacts...'
          archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
        }
      }
      steps {
        setBuildStatus("Building ISO", "PENDING");
        checkout scm
        echo 'Starting iXBuild Framework pipeline'
        sh '/ixbuild/jenkins.sh freenas freenas-pipeline'
      }
    }

    stage('PR Staging') {
      agent {
        label 'FreeNAS-Update-Stage'
      }
      steps {
        echo 'Staging the PR update'
        setBuildStatus("Staging ISO", "PENDING");
        sh 'rm -rf ${WORKSPACE}/artifacts/*Update'
        unstash 'update-files'
        sh '/root/freenas-update/release-pr-workspace.sh'
      }
    }
  }
}

void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/freenas/webui"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/testing-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ] ]);
}
 
