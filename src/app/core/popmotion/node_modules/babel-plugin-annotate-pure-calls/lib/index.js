'use strict';

exports.__esModule = true;

var _babelPluginSyntaxDynamicImport = require('babel-plugin-syntax-dynamic-import');

var _babelPluginSyntaxDynamicImport2 = _interopRequireDefault(_babelPluginSyntaxDynamicImport);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PURE_ANNOTATION = '#__PURE__';

var isPureAnnotated = function isPureAnnotated(node) {
  var leadingComments = node.leadingComments;

  if (!leadingComments) {
    return false;
  }
  return leadingComments.some(function (comment) {
    return (/[@#]__PURE__/.test(comment.value)
    );
  });
};

function annotateAsPure(path) {
  if (isPureAnnotated(path.node)) {
    return;
  }
  path.addComment('leading', PURE_ANNOTATION);
}

var hasCallableParent = function hasCallableParent(_ref) {
  var parentPath = _ref.parentPath;
  return parentPath.isCallExpression() || parentPath.isNewExpression();
};

var isUsedAsCallee = function isUsedAsCallee(path) {
  if (!hasCallableParent(path)) {
    return false;
  }

  return path.parentPath.get('callee') === path;
};

var isInCallee = function isInCallee(path) {
  do {
    path = path.parentPath;

    if (isUsedAsCallee(path)) {
      return true;
    }
  } while (!path.isStatement() && !path.isFunction());

  return false;
};

var isTopLevel = function isTopLevel(path) {
  return path.getFunctionParent().isProgram();
};

var isExecutedDuringInitialization = function isExecutedDuringInitialization(path) {
  if (isTopLevel(path)) {
    return true;
  }

  var functionParent = void 0;

  do {
    functionParent = (functionParent || path).getFunctionParent();

    if (!isUsedAsCallee(functionParent)) {
      return false;
    }
  } while (!isTopLevel(functionParent));

  return true;
};

var isInAssignmentContext = function isInAssignmentContext(path) {
  var statement = path.getStatementParent();
  var parentPath = void 0;

  do {
    ;
    var _ref2 = parentPath || path;

    parentPath = _ref2.parentPath;


    if (parentPath.isVariableDeclaration() || parentPath.isAssignmentExpression()) {
      return true;
    }
  } while (parentPath !== statement);

  return false;
};

var callableExpressionVisitor = function callableExpressionVisitor(path) {
  if (isUsedAsCallee(path) || isInCallee(path)) {
    return;
  }

  if (!isExecutedDuringInitialization(path)) {
    return;
  }

  if (!isInAssignmentContext(path) && !path.getStatementParent().isExportDefaultDeclaration()) {
    return;
  }

  annotateAsPure(path);
};

exports.default = function () {
  return {
    inherits: _babelPluginSyntaxDynamicImport2.default,
    visitor: {
      'CallExpression|NewExpression': callableExpressionVisitor
    }
  };
};