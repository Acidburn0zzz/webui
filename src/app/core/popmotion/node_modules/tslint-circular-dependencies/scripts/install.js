#!/usr/bin/env node

const debug     = require('debug')('install');
const findUp    = require('find-up');
const fs        = require('fs');
const path      = require('path');
const readPkgUp = require('read-pkg-up');

const tslintFilename = getTslintFilename();
debug({tslintFilename});

function getTslintFilename() {
  const isSubmodule = /\/node_modules\//.test(__dirname);

  const options = { cwd: path.resolve(__dirname, isSubmodule ? './../../' : '')}
  const mainPath = path.dirname( findUp.sync('package.json', options));
  debug({isSubmodule, options, mainPath});

  let tslintFilename = findUp.sync('tslint.json', options);
  if(tslintFilename && tslintFilename.startsWith(mainPath)) return tslintFilename;

  return tslintFilename = path.join(mainPath,'tslint.json');
}

function loadTslintFile()
{
  debug({tslintFilename});

  const config = requireOrEmpty(tslintFilename);
  return config;

  function requireOrEmpty(filename) {
    try {
      return require(filename);
    }
    catch(error) {
      return {}
    }
  };
}

function updateTslintFile(addPackageToExtends)
{
  const packageName = readPkgUp.sync({cwd: __dirname}).pkg.name;
  debug({packageName});
  const config = loadTslintFile();

  config.extends = config.extends || [];
  config.extends = config.extends.filter( name => name !== packageName);

  if(addPackageToExtends) config.extends.push(packageName);

  fs.writeFileSync(tslintFilename, JSON.stringify(config, null, 2));
}

switch(process.argv[2]) {
  case 'a':
  case 'add':
    updateTslintFile(true);
    break;

  case 'r':
  case 'remove':
    updateTslintFile(false);
    break;

  default:
    process.exit(1);
}
